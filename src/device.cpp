#include "serial.h"
#include "device.h"
#include "log.h"

void create_devices ( std::vector<Device>& devices, riku::Serial& serial )
{
/*
    devices.push_back( Device(serial, "AK", 
                    {0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1}, 
                    {0x11,0x11,0x11} 
                ) );

    devices.push_back( Device(serial, "ION",
                    {0x2,0x2,0x2,0x2,0x2}, 
                    {0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,22,0x22,0x22,0x22,0x22,0x22,22,0x22,0x22} 
                ) );
*/


    devices.push_back( Device(serial, "AK 0x02", 
                    {0x00,0x02,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0x5d,0x0e},
                    {0x0, 0x02, 0x96} 
                ) );

    devices.push_back( Device(serial, "AK 0xf4", 
                    {0x00,0xf4,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0x05,0xfd},
                    {0x0, 0xf4, 0x96} 
                ) );



    devices.push_back( Device(serial, "AK 0xff", 
                    {0x00,0xff,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0x05,0xfd},
                    {0x0, 0xff, 0x96} 
                ) );
/*
    devices.push_back( Device(serial, "UNS", 
                   {0x00,0x20,0x03,0x00,0x00,0x00,0xb3,0x03},
                   {0x00,0x20,0x84,0x10,0xeb,0xac,0xbc,0x20,0x08,0x82,0x3d,0x00,0x00,0x00,0x00,0x20,0x08,0x02,0x3d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xcc,0x01,0xee,0x02,0xcd,0x01,0x02,0xbd,0xe6,0xd5,0x2d,0x3d,0x2b,0x60,0x2d,0x3c,0x00,0x00,0x00,0x00,0x2b,0x60,0x2d,0x3c,0xe6,0xd5,0x2d,0x3c,0xe6,0xd5,0x2d,0x3c,0xf4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2b,0x60,0xad,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xcd,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xe6,0xd5,0xad,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2d,0x01,0x00,0x00,0x00,0x00,0x00,0x03,0x8c,0x13}
	       ) );
*/
}



/*-------------------------*/

Device::Device ( riku::Serial& s, std::string t, std::vector <uint8_t> r, std::vector <uint8_t> a ):
    name_( t ),
    serial_( s ),
    request_( r ),
    answer_( a )
{
}

std::string Device::name()
{
    return name_;
}

bool Device::check_answer(  uint8_t const* buff )
{
    for ( size_t i = 0; i < answer_.size(); ++i )
    {
        if ( buff[i] != answer_[i] )
            return false;
    }
    return true;
}

bool Device::check_request( uint8_t const* buff )
{
    for ( size_t i = 0; i < request_.size(); ++i )
    {
        if ( buff[i] != request_[i] )
            return false;
    }
    return true;
}

uint8_t const* Device::request_out()
{
    return request_.data();
}
uint8_t* Device::request_in()
{
    return reqbuff_;
}
size_t Device::rsize()
{
    return request_.size();
}

uint8_t const* Device::answer_out()
{
    return answer_.data();
}
uint8_t* Device::answer_in()
{
    return ansbuff_;
}
size_t Device::asize()
{
    return answer_.size();
}